//Sp=> Stored Procedures//

create user bookinguser@localhost identified by 'password'

delimiter $$
create definer=arun@localhost procedure EduProc()
sql security definer
begin
select * from rooms;
end $$

delimiter $$
create definer=arun@localhost procedure EduJoin()
sql security definer
begin
select c.first_name,c.email,b.customer_id,f.name as film_name, r.name as room_name, s.start_time,se.rown as rownumber, se.number as seatnumber
FROM customers c JOIN bookings b 
on c.id = b.customer_id
JOIN screenings s
on s.id = b.screening_id
JOIN films f
on f.id = s.film_id
JOIN rooms r
on r.id = s.room_id
JOIN reserved_seat rs
on rs.booking_id = b.id 
JOIN seats se
on se.id = rs.seat_id
end $$

delimiter $$
Create procedure getAllData(in tableName varchar(45))
begin
select * from tableName;
end $$


call getAllData('films')

delimiter $$
Create procedure showFilms(in length_m int, in pid int)
begin
select * from films where length_min>length_m and id=pid;
end $$

call showFilms(150,1);

select * from films;

delimiter $$
Create procedure getFilms(in theName varchar(450))
begin
select * from films where name = theName;
end $$

call getFilms('Dunkirk');

//////////////
Variables
//////////////
show databases;
use ticket_booking;

select 5+100;
select now();

set @user='john';
select @user;

set @length=120;

select name, length_min from films where length_min>@length;

set @filmname="Geostorm";

call getFilms(@filmname)

////////
Triggers
///////////
CREATE DATABASE Shop_Sales;
USE Shop_Sales;


create table sales(
id INT PRIMARY KEY,
product varchar(30) not null,
value numeric(10.2)
);


create table sales_update(
	id INT PRIMARY KEY AUTO_INCREMENT,
    product_id int not null,
    change_at timestamp,
    before_value numeric(10.2) not null,
    after_value numeric(10.2) not null
);

insert into sales (id,product,value) values(2,"Bat",1.20);
insert into sales (id,product,value) values(1,"Ball",2.20);
insert into sales (id,product,value) values(3,"Hockey",3.20);
insert into sales (id,product,value) values(4,"Wickets",4.20);

select * from sales;
update sales set value =5 where id =4;

delimiter $$
create trigger before_sales_update before update on sales for each row
begin 
    insert into sales_update(product_id,change_at,before_value,after_value)
        values(old.id,now(),old.value,new.value);
end $$

/////////////////
users
//////////////

select * from mysql.user;

create user 'aakashh'@'localhost' identified by 'admin987';

grant all privileges on *.* to 'aakashh'@'localhost';

grant select on ticket_booking.* to 'aakashh'@'localhost';

grant select on ticket_booking.rooms to 'aakashh'@'localhost';

grant select on ticket_booking.rooms to 'aakashh'@'%';

drop user 'aakashh'@'localhost';

////////////
Locks
/////////////

Lock TABLES films Write
UNLOCK TABLES

////////
ROLLBACK
///////////

use ticket_booking;
START TRANSACTION;
INSERT films (name, length_min) values ('Avenges',111);
select * from films;
delete from films where id=13;
savepoint test1;

update films set name="Avengers end game" where id=14;
rollback to test1;